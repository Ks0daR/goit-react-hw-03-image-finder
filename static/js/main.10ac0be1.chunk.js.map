{"version":3,"sources":["components/Searchbar/Searchbar.js","components/ImageGallery/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Button/Button.js","components/Modal/Modal.js","components/Loader/Loader.js","utils/imagesApi.js","components/App.js","index.js"],"names":["Searchbar","state","inputValue","handleInput","value","target","setState","onHandleSubmit","e","preventDefault","props","onSubmit","this","className","type","onChange","autoComplete","autoFocus","placeholder","Component","ImageGalleryItem","webformatURL","largeImageURL","tags","onOpen","src","alt","onClick","ImageGallery","images","map","id","key","Button","onLoad","Modal","handleKeyDown","code","onClose","closeModalByClick","currentTarget","window","addEventListener","removeEventListener","imgUrl","App","color","height","width","timeout","getImagesByQuery","serchQuery","page","axios","get","loading","openModal","searchQuery","errorMessage","handleSubmit","loadNewContent","then","hits","data","catch","error","finally","openLargeImage","largeImgUrl","toggleModal","prevProps","prevState","scrollTo","top","document","documentElement","scrollHeight","behavior","length","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.10ac0be1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Searchbar extends Component {\n  state = {\n    inputValue: '',\n  };\n\n  handleInput = ({ target: { value } }) => {\n    this.setState({ inputValue: value });\n  };\n\n  onHandleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state.inputValue);\n    this.setState({ inputValue: '' });\n  };\n\n  render() {\n    const { inputValue } = this.state;\n    return (\n      <header className=\"Searchbar\">\n        <form className=\"SearchForm\" onSubmit={this.onHandleSubmit}>\n          <button type=\"submit\" className=\"SearchForm-button\">\n            <span className=\"SearchForm-button-label\">Search</span>\n          </button>\n\n          <input\n            className=\"SearchForm-input\"\n            value={inputValue}\n            onChange={this.handleInput}\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search images and photos\"\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nexport default Searchbar;\n","import React from 'react';\n\nexport default function ImageGalleryItem({\n  webformatURL,\n  largeImageURL,\n  tags,\n  onOpen,\n}) {\n  return (\n    <li className=\"ImageGalleryItem\">\n      <img\n        src={webformatURL}\n        alt={tags}\n        onClick={() => onOpen(largeImageURL)}\n        className=\"ImageGalleryItem-image\"\n      />\n    </li>\n  );\n}\n","import React from 'react';\nimport ImageGalleryItem from './ImageGalleryItem';\n\nfunction ImageGallery({ images, onOpen }) {\n  return (\n    <ul className=\"ImageGallery\">\n      {images.map(({ id, webformatURL, largeImageURL, tags }) => (\n        <ImageGalleryItem\n          key={id}\n          webformatURL={webformatURL}\n          largeImageURL={largeImageURL}\n          tags={tags}\n          onOpen={onOpen}\n        />\n      ))}\n    </ul>\n  );\n}\n\nexport default ImageGallery;\n","import React from 'react';\n\nexport default function Button({ onLoad }) {\n  return (\n    <button type=\"button\" className=\"Button\" onClick={onLoad}>\n      Load more\n    </button>\n  );\n}\n","import React, { Component } from 'react';\n\nexport default class Modal extends Component {\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  handleKeyDown = ({ code }) => {\n    if (code === 'Escape') {\n      this.props.onClose();\n    }\n  };\n\n  closeModalByClick = ({ target, currentTarget }) => {\n    if (target === currentTarget) {\n      this.props.onClose();\n    }\n  };\n\n  render() {\n    return (\n      <div onClick={this.closeModalByClick} className=\"Overlay\">\n        <div className=\"Modal\">\n          <img src={this.props.imgUrl} alt=\"\" />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Loader from 'react-loader-spinner';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Loader\n        className=\"Loader\"\n        type=\"Audip\"\n        color=\"#00BFFF\"\n        height={80}\n        width={80}\n        timeout={3000} //3 secs\n      />\n    );\n  }\n}\n","import axios from 'axios';\n\nconst key = '14644057-ca985d2fae582aa79c730fd25';\n\nconst getImagesByQuery = (serchQuery, page) => {\n  return axios.get(\n    `https://pixabay.com/api/?key=${key}&q=${serchQuery}&page=${page}&image_type=photo`,\n  );\n};\n\nexport default getImagesByQuery;\n","import React, { Component } from 'react';\nimport Searchbar from './Searchbar';\nimport ImageGallery from './ImageGallery';\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loader from './Loader';\nimport getImagesByQuery from '../utils/imagesApi';\n\nexport default class App extends Component {\n  state = {\n    images: [],\n    loading: false,\n    openModal: false,\n    searchQuery: '',\n    page: 1,\n    imgUrl: '',\n    errorMessage: '',\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const oldQuery = prevState.searchQuery;\n    const newQuery = this.state.searchQuery;\n\n    if (oldQuery !== newQuery) {\n      this.loadNewContent();\n    }\n\n    if (!this.state.loading) {\n      window.scrollTo({\n        top: document.documentElement.scrollHeight,\n        behavior: 'smooth',\n      });\n    }\n  }\n\n  handleSubmit = value => {\n    this.setState({ searchQuery: value, page: 1, images: [] });\n  };\n\n  loadNewContent = () => {\n    const { searchQuery, page } = this.state;\n    this.setState({ loading: true });\n\n    getImagesByQuery(searchQuery, page)\n      .then(({ data: { hits } }) =>\n        this.setState(state => ({\n          images: [...state.images, ...hits],\n          page: state.page + 1,\n        })),\n      )\n      .catch(error => {\n        this.setState({ errorMessage: error });\n      })\n      .finally(() => {\n        this.setState({ loading: false });\n      });\n  };\n\n  openLargeImage = largeImgUrl => {\n    this.setState({ imgUrl: largeImgUrl });\n    this.toggleModal();\n  };\n\n  toggleModal = () => {\n    this.setState(state => ({ openModal: !state.openModal }));\n  };\n\n  render() {\n    const { images, loading, openModal, imgUrl } = this.state;\n    return (\n      <>\n        <Searchbar onSubmit={this.handleSubmit} />;{loading ? <Loader /> : null}\n        {images.length > 0 && (\n          <>\n            <ImageGallery images={images} onOpen={this.openLargeImage} />\n            <Button onLoad={this.loadNewContent} />\n            {openModal ? (\n              <Modal onClose={this.toggleModal} imgUrl={imgUrl} />\n            ) : null}\n          </>\n        )}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './components/styles.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}